(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[915],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return s},kt:function(){return p}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),m=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},s=function(e){var n=m(e.components);return r.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),d=m(t),p=a,h=d["".concat(l,".").concat(p)]||d[p]||u[p]||o;return t?r.createElement(h,i(i({ref:n},s),{},{components:t})):r.createElement(h,i({ref:n},s))}));function p(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=d;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var m=2;m<o;m++)i[m]=t[m];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},5058:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return c},contentTitle:function(){return l},metadata:function(){return m},toc:function(){return s},default:function(){return d}});var r=t(2122),a=t(9756),o=(t(7294),t(3905)),i=["components"],c={title:"Charmil Commands",slug:"/charmil_commands"},l=void 0,m={unversionedId:"charmil_commands",id:"charmil_commands",isDocsHomePage:!1,title:"Charmil Commands",description:"Charmil provides prebuilt commands for developers to use when testing their application. These commands are opt-in and are only added when the application is built with a specific tag.",source:"@site/../docs/src/charmil_commands.md",sourceDirName:".",slug:"/charmil_commands",permalink:"/charmil/docs/charmil_commands",editUrl:"https://github.com/aerogear/charmil/tree/main/docs/src/../docs/src/charmil_commands.md",version:"current",frontMatter:{title:"Charmil Commands",slug:"/charmil_commands"},sidebar:"main",previous:{title:"Charmil Logger",permalink:"/charmil/docs/charmil_logger"},next:{title:"Charmil Validator",permalink:"/charmil/docs/charmil_validator"}},s=[],u={toc:s};function d(e){var n=e.components,t=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Charmil provides prebuilt commands for developers to use when testing their application. These commands are opt-in and are only added when the application is built with a specific tag."),(0,o.kt)("p",null,"To add charmil commands to your root command you can call the ",(0,o.kt)("inlineCode",{parentName:"p"},"AttachCharmilCommands()")," function with your root command. It also must be noted that just not being in a dev build shouldn't cause ",(0,o.kt)("inlineCode",{parentName:"p"},"err")," to be populated.  "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'cmd := &cobra.Command{\n        Use:          "Host",\n        Short:        "Host CLI for embedding commands",\n        SilenceUsage: true,\n}\n\nerr = commands.AttachCharmilCommands(cmd)\nif err != nil {\n    log.Fatal(err)\n}\n')),(0,o.kt)("p",null,"Charmil commands are opt-in meaning you must specifically ask for them in your build; meaning trying to call ",(0,o.kt)("inlineCode",{parentName:"p"},"AttachCharmilCommands()")," does not do anything in these builds."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"go build -tags dev ack.go\n")),(0,o.kt)("p",null,"Now this build will make charmil commands available to use. You can run a charmil command by running the ",(0,o.kt)("inlineCode",{parentName:"p"},"charmil")," command and any subcommand."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"ack charmil validate\n")))}d.isMDXComponent=!0}}]);