(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[690],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return s},kt:function(){return g}});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=a.createContext({}),c=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},s=function(e){var n=c(e.components);return a.createElement(p.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},f=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),f=c(t),g=r,u=f["".concat(p,".").concat(g)]||f[g]||m[g]||i;return t?a.createElement(u,o(o({ref:n},s),{},{components:t})):a.createElement(u,o({ref:n},s))}));function g(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=f;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var c=2;c<i;c++)o[c]=t[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}f.displayName="MDXCreateElement"},7537:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return l},contentTitle:function(){return p},metadata:function(){return c},toc:function(){return s},default:function(){return f}});var a=t(2122),r=t(9756),i=(t(7294),t(3905)),o=["components"],l={},p="Charmil Config",c={unversionedId:"charmil_config",id:"charmil_config",isDocsHomePage:!1,title:"Charmil Config",description:"The Charmil Config package offers a convenient mechanism for both host and plugin developers to manage configurations in their command-line interface (CLI) applications made using Cobra.",source:"@site/../docs/src/charmil_config.md",sourceDirName:".",slug:"/charmil_config",permalink:"/charmil/docs/charmil_config",version:"current",frontMatter:{}},s=[{value:"Features:",id:"features",children:[]},{value:"Steps to Use:",id:"steps-to-use",children:[]},{value:"Here&#39;s an example for the same:",id:"heres-an-example-for-the-same",children:[]}],m={toc:s};function f(e){var n=e.components,t=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"charmil-config"},"Charmil Config"),(0,i.kt)("p",null,"The Charmil Config package offers a convenient mechanism for both host and plugin developers to manage configurations in their command-line interface (CLI) applications made using ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/spf13/cobra"},"Cobra"),"."),(0,i.kt)("h2",{id:"features"},"Features:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Helps in maintaining all available configurations in a single, centralized local config file."),(0,i.kt)("li",{parentName:"ul"},"Provides the plugin developers with a functionality to add their CLI configurations to the host CLI local config file with ease."),(0,i.kt)("li",{parentName:"ul"},"Provides the host CLI developers with a set of methods to read/write configurations from/to a local config file.")),(0,i.kt)("h2",{id:"steps-to-use"},"Steps to Use:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("h3",{parentName:"li",id:"for-host-cli-developers"},"For host CLI developers:"),(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Open the file where the root command of your CLI is defined using Cobra.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Import the Charmil Config package by adding the following line at the top of that file:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-go"},'import c "github.com/aerogear/charmil/core/config"\n'))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Define a struct whose fields represent the keys to all the values that you want to store as config and create an instance of it.\n",(0,i.kt)("strong",{parentName:"p"},"Important"),": Every field of the defined struct needs to be exportable (ie. start with an uppercase letter). The unexportable fields cannot be stored as config."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"  _Example:_\n\n  ```go\n    type config struct {\n        Key1 string\n        Key2 string\n        Key3 string\n        Key4 string\n    }\n\n    cfg = &config{}\n  ```\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Store a new instance of the Charmil Config handler by calling the ",(0,i.kt)("inlineCode",{parentName:"p"},"NewHandler")," function while passing the path of local config file and the instance of the config struct (initialized in the last step) as arguments."),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("em",{parentName:"p"},"Example:")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-go"},'h = c.NewHandler("./examples/host/config.json", cfg)\n'))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Load config values from the local config file using the ",(0,i.kt)("inlineCode",{parentName:"p"},"Load")," method."),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("em",{parentName:"p"},"Example:")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-go"},"err := h.Load()\nif err != nil {\n    log.Fatal(err)\n}\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"You can set/get/modify values under any key of config using the idiomatic way to interact with structs in Golang."),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("em",{parentName:"p"},"Example:")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-go"},'// Sets a value into config\ncfg.Key4 = "val4"\n\n// Overwrites a value in config\ncfg.Key2 = "newVal2"\n\n// Returns the value under specified key in config\nfmt.Println(cfg.Key3) // Prints: val3\n'))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Write current config into the local config file using the ",(0,i.kt)("inlineCode",{parentName:"p"},"Save")," method."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"_Example:_\n\n```go\nerr = h.Save()\nif err != nil {\n    log.Fatal(err)\n}\n```\n"))))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("h3",{parentName:"li",id:"for-plugin-developers"},"For plugin developers:"),(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Open the file where the root command of your CLI is defined using Cobra.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Import the Charmil Config package by adding the following line at the top of that file:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-go"},'import c "github.com/aerogear/charmil/core/config"\n'))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Define a struct whose fields represent the keys to all the values that you want to store as config and create an instance of it.\n",(0,i.kt)("strong",{parentName:"p"},"Important"),": Every field of the defined struct needs to be exportable (ie. start with an uppercase letter). The unexportable fields cannot be stored as config."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"  _Example:_\n\n  ```go\n    type config struct {\n        Key5 string\n        Key6 string\n        Key7 string\n        Key8 string\n    }\n\n    cfg = &config{}\n  ```\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"You can set/get/modify values under any key of config using the idiomatic way to interact with structs in Golang."),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("em",{parentName:"p"},"Example:")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-go"},'// Sets values into config\ncfg.Key5 = "val5"\ncfg.Key6 = "val6"\ncfg.Key7 = "oldVal7"\ncfg.Key8 = "val8"\n\n// Overwrites a value in config\ncfg.Key7 = "val7"\n\n// Returns the value under specified key in config\nfmt.Println(cfg.Key6) // Prints: val6\n'))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"MergePluginCfg")," function to merge the current plugin config into the host CLI config struct."),(0,i.kt)("p",{parentName:"li"},(0,i.kt)("em",{parentName:"p"},"Example:")),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-go"},"err = c.MergePluginCfg(pluginName, h, cfg)\nif err != nil {\n    log.Fatal(err)\n}\n")),(0,i.kt)("p",{parentName:"li"},"where ",(0,i.kt)("inlineCode",{parentName:"p"},"pluginName")," is the name of the plugin (as you want it in the local config file), ",(0,i.kt)("inlineCode",{parentName:"p"},"h")," is the config handler passed from the host CLI and ",(0,i.kt)("inlineCode",{parentName:"p"},"cfg")," is a pointer to an instance of the current config file (initialized in step 3)."))))),(0,i.kt)("h2",{id:"heres-an-example-for-the-same"},"Here's an example for the same:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("h4",{parentName:"li",id:"initial-configurations-before-running-the-host-cli"},"Initial Configurations ","[Before running the Host CLI]",":"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("em",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"em"},"config.json"))," file:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "key1": "val1",\n  "key2": "val2",\n  "key3": "val3"\n}\n'))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Plugin A's Config Struct:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-go"},"{val4 val5 val6}\n"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Plugin B's Config Struct:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-go"},"{val7 val8 val9}\n"))))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("h4",{parentName:"li",id:"final-configurations-after-running-the-host-cli"},"Final Configurations ","[After running the Host CLI]",":"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"em"},"config.json"))," file:",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "key1": "val1",\n  "key2": "val2",\n  "key3": "val3",\n  "plugins": {\n    "pluginA": {\n      "Key4": "val4",\n      "Key5": "val5",\n      "Key6": "val6"\n    },\n    "pluginB": {\n      "Key7": "val7",\n      "Key8": "val8",\n      "Key9": "val9"\n    }\n  }\n}\n')))))))}f.isMDXComponent=!0}}]);