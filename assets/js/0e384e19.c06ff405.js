(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[671],{3905:function(e,t,r){"use strict";r.d(t,{Zo:function(){return m},kt:function(){return p}});var n=r(7294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var c=n.createContext({}),u=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},m=function(e){var t=u(e.components);return n.createElement(c.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,o=e.originalType,c=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),d=u(r),p=i,h=d["".concat(c,".").concat(p)]||d[p]||s[p]||o;return r?n.createElement(h,a(a({ref:t},m),{},{components:r})):n.createElement(h,a({ref:t},m))}));function p(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=r.length,a=new Array(o);a[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:i,a[1]=l;for(var u=2;u<o;u++)a[u]=r[u];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},426:function(e,t,r){"use strict";r.r(t),r.d(t,{frontMatter:function(){return l},contentTitle:function(){return c},metadata:function(){return u},toc:function(){return m},default:function(){return d}});var n=r(2122),i=r(9756),o=(r(7294),r(3905)),a=["components"],l={title:"Introduction"},c="Charmil",u={unversionedId:"intro",id:"intro",isDocsHomePage:!1,title:"Introduction",description:"Introduction",source:"@site/docs/intro.md",sourceDirName:".",slug:"/intro",permalink:"/charmil/docs/intro",editUrl:"https://github.com/aerogear/charmil/docs/intro.md",version:"current",frontMatter:{title:"Introduction"},sidebar:"main",next:{title:"Charmil Factory",permalink:"/charmil/docs/charmil_factory"}},m=[{value:"Introduction",id:"introduction",children:[{value:"Architecture",id:"architecture",children:[]}]},{value:"Components",id:"components",children:[{value:"Charmil Plugin framework starter template",id:"charmil-plugin-framework-starter-template",children:[]},{value:"Charmil SDK",id:"charmil-sdk",children:[]},{value:"Charmil Validator",id:"charmil-validator",children:[]},{value:"Charmil Command Registry",id:"charmil-command-registry",children:[]}]},{value:"Documentation",id:"documentation",children:[]},{value:"License",id:"license",children:[]}],s={toc:m};function d(e){var t=e.components,r=(0,i.Z)(e,a);return(0,o.kt)("wrapper",(0,n.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"charmil"},"Charmil"),(0,o.kt)("h2",{id:"introduction"},"Introduction"),(0,o.kt)("p",null,"Charmil provides ecosystem of tools to build production ready command line tools with Cobra Framework."),(0,o.kt)("h3",{id:"architecture"},"Architecture"),(0,o.kt)("p",null,"Charmil provides a way to build a CLI ecosystem where developers can build multiple fragmented CLI's in various repositories\nand embed them later in the single host CLI. Charmil provides core base functionality that helps to abstract various elements\nof the CLI ecosystem:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Logging"),(0,o.kt)("li",{parentName:"ul"},"Authentication"),(0,o.kt)("li",{parentName:"ul"},"Configuration"),(0,o.kt)("li",{parentName:"ul"},"Commands and Flags standards.")),(0,o.kt)("p",null,"Charmil SDK will typically be introduced into two different CLI"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Host CLI - CLI that is being used by end user that can embed one or more Plugins CLI"),(0,o.kt)("li",{parentName:"ul"},"Plugins CLI - Separate CLI that can be also embedded into host CLI")),(0,o.kt)("h2",{id:"components"},"Components"),(0,o.kt)("h3",{id:"charmil-plugin-framework-starter-template"},"Charmil Plugin framework starter template"),(0,o.kt)("p",null,"Creating Golang CLI should be easy and fast.\nCharmil starter template provides fast way to build plugin and host commands that use Charmil SDK and Validator.\nStarter template contains all tools and solutions required to build command line tool"),(0,o.kt)("h3",{id:"charmil-sdk"},"Charmil SDK"),(0,o.kt)("p",null,"Framework for building modular, multi repo Golang CLI's with Cobra\nNumber of high level implementations for individual CLI creators for common problems like configuration, authentication and internationalization\nProvides ability to embed modular CLI into hosts CLI at compile time."),(0,o.kt)("h3",{id:"charmil-validator"},"Charmil Validator"),(0,o.kt)("p",null,"Charmil Validator gives developers the ability to validate a group of their cobra commands against common practices.\nValidator can check if commands are providing proper documentation, doesn't have overriden flags or provide shell completions.\nValidator can be used as go unit test and run during CI/CD that simplifies review of CLI's that contain commands that are hosted in multiple repositories."),(0,o.kt)("h3",{id:"charmil-command-registry"},"Charmil Command Registry"),(0,o.kt)("p",null,"Charmil command registry lets you provide external index of the command line tools that can be installed dynamically and embeeded into your host CLI.\nDevelopers can create CLI profiles to install multiple individual CLI's at the same time and keep them updated with various backends like Kubernetes/OpenShift etc."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Under Construction")),(0,o.kt)("h2",{id:"documentation"},"Documentation"),(0,o.kt)("p",null,"Visit the ",(0,o.kt)("a",{parentName:"p",href:"docs/src"},"Charmil Documentation")),(0,o.kt)("h2",{id:"license"},"License"),(0,o.kt)("p",null,"Licensed under the Apache License 2.0"))}d.isMDXComponent=!0}}]);