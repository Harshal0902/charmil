(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[571],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return s},kt:function(){return d}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),p=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=p(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),m=p(n),d=a,f=m["".concat(c,".").concat(d)]||m[d]||u[d]||o;return n?r.createElement(f,i(i({ref:t},s),{},{components:n})):r.createElement(f,i({ref:t},s))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9707:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return c},metadata:function(){return p},toc:function(){return s},default:function(){return m}});var r=n(2122),a=n(9756),o=(n(7294),n(3905)),i=["components"],l={},c="Charmil CRUD Generator",p={unversionedId:"charmil_cli_crud",id:"charmil_cli_crud",isDocsHomePage:!1,title:"Charmil CRUD Generator",description:"- With the help of the charmil crud command, developers can eliminate a lot of boilerplate in CLIs containing multiple services that perform standard CRUD operations.",source:"@site/../docs/src/charmil_cli_crud.md",sourceDirName:".",slug:"/charmil_cli_crud",permalink:"/charmil/docs/charmil_cli_crud",version:"current",frontMatter:{}},s=[{value:"Usage:",id:"usage",children:[]},{value:"Flags:",id:"flags",children:[]},{value:"Steps to use:",id:"steps-to-use",children:[]}],u={toc:s};function m(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"charmil-crud-generator"},"Charmil CRUD Generator"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"With the help of the ",(0,o.kt)("inlineCode",{parentName:"p"},"charmil crud")," command, developers can eliminate a lot of boilerplate in CLIs containing multiple services that perform standard CRUD operations.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Using a set of pre-defined templates, this command generates CRUD command packages in the directory specified by the ",(0,o.kt)("inlineCode",{parentName:"p"},"crudpath")," flag as well as its corresponding language file in the directory specified by the ",(0,o.kt)("inlineCode",{parentName:"p"},"localepath")," flag.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"These generated files can then be modified by developers to fit their own needs."))),(0,o.kt)("h2",{id:"usage"},"Usage:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"charmil crud [flags]\n")),(0,o.kt)("h2",{id:"flags"},"Flags:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'  -c, --crudpath string     path where CRUD files need to be generated (default ".")\n  -h, --help                help for crud\n  -l, --localepath string   path where the language file needs to be generated (default ".")\n  -p, --plural string       name in plural form (REQUIRED)\n  -s, --singular string     name in singular form (REQUIRED)\n')),(0,o.kt)("h2",{id:"steps-to-use"},"Steps to use:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Let's say you need to generate CRUD commands for managing your Kafka instances, the following command can be used for the same:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'$ charmil crud --singular=kafka --plural=kafkas --crudpath="./kafka" --localepath="./cmd/locales/en"\n'))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"On running the command mentioned above, the required files will be generated in your project in the following structure:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-code"},"\ud83d\udce6Your CLI\n \u2523 \ud83d\udcc2cmd\n \u2503 \u2517 \ud83d\udcc2locales\n \u2503   \u2517 \ud83d\udcc2en\n \u2503     \u2517 \ud83d\udcdccrud.en.yaml\n \u2517 \ud83d\udcc2kafka\n   \u2523 \ud83d\udcc2create\n   \u2503 \u2523 \ud83d\udcdccreate.go\n   \u2503 \u2517 \ud83d\udcdcrun.go\n   \u2523 \ud83d\udcc2delete\n   \u2503 \u2523 \ud83d\udcdcdelete.go\n   \u2503 \u2517 \ud83d\udcdcrun.go\n   \u2523 \ud83d\udcc2describe\n   \u2503 \u2523 \ud83d\udcdcdescribe.go\n   \u2503 \u2517 \ud83d\udcdcrun.go\n   \u2523 \ud83d\udcc2list\n   \u2503 \u2523 \ud83d\udcdclist.go\n   \u2503 \u2517 \ud83d\udcdcrun.go\n   \u2523 \ud83d\udcc2use\n   \u2503 \u2523 \ud83d\udcdcuse.go\n   \u2503 \u2517 \ud83d\udcdcrun.go\n   \u2517 \ud83d\udcdckafka.go\n"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Once the CRUD packages have been generated, go to the generated ",(0,o.kt)("inlineCode",{parentName:"p"},"kafka.go")," file and add all the missing imports there.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Using the following line, add the generated CRUD commands to your CLI:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-go"},"cmd.AddCommand(kafka.NewCommand(cmdFactory))\n")),(0,o.kt)("p",{parentName:"li"},"where ",(0,o.kt)("inlineCode",{parentName:"p"},"cmd")," refers to your CLI's parent command and ",(0,o.kt)("inlineCode",{parentName:"p"},"cmdFactory")," refers to the factory instance."))),(0,o.kt)("p",null,"Now you're all set to use the CRUD commands in your CLI."))}m.isMDXComponent=!0}}]);