(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[811],{3905:function(e,t,r){"use strict";r.d(t,{Zo:function(){return c},kt:function(){return m}});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var u=n.createContext({}),s=function(e){var t=n.useContext(u),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=s(e.components);return n.createElement(u.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,u=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=s(r),m=a,f=p["".concat(u,".").concat(m)]||p[m]||d[m]||o;return r?n.createElement(f,i(i({ref:t},c),{},{components:r})):n.createElement(f,i({ref:t},c))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=p;var l={};for(var u in t)hasOwnProperty.call(t,u)&&(l[u]=t[u]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=r[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}p.displayName="MDXCreateElement"},9978:function(e,t,r){"use strict";r.r(t),r.d(t,{frontMatter:function(){return l},contentTitle:function(){return u},metadata:function(){return s},toc:function(){return c},default:function(){return p}});var n=r(2122),a=r(9756),o=(r(7294),r(3905)),i=["components"],l={title:"Charmil Validator",slug:"/charmil_validator"},u=void 0,s={unversionedId:"validator",id:"validator",isDocsHomePage:!1,title:"Charmil Validator",description:"Validator can be used for testing and controlling many aspects of cobra commands. It provides many rules out of the box for validating the commands.",source:"@site/docs/validator.md",sourceDirName:".",slug:"/charmil_validator",permalink:"/charmil/docs/charmil_validator",editUrl:"https://github.com/aerogear/charmil/docs/validator.md",version:"current",frontMatter:{title:"Charmil Validator",slug:"/charmil_validator"},sidebar:"main",previous:{title:"Charmil Commands",permalink:"/charmil/docs/charmil_commands"}},c=[{value:"Rules provided by validator",id:"rules-provided-by-validator",children:[]},{value:"How to use",id:"how-to-use",children:[]}],d={toc:c};function p(e){var t=e.components,r=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Validator can be used for testing and controlling many aspects of cobra commands. It provides many rules out of the box for validating the commands."),(0,o.kt)("h2",{id:"rules-provided-by-validator"},"Rules provided by validator"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"LengthRule"),(0,o.kt)("li",{parentName:"ul"},"MustExistRule"),(0,o.kt)("li",{parentName:"ul"},"UseMatchesRule",(0,o.kt)("blockquote",{parentName:"li"},(0,o.kt)("p",{parentName:"blockquote"},"We are working on the validator library to provide more rules")))),(0,o.kt)("h2",{id:"how-to-use"},"How to use"),(0,o.kt)("p",null,"It is recommended to use the validator while writing unit tests for cobra commands."),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Create a configuration of type ",(0,o.kt)("inlineCode",{parentName:"li"},"rules.ValidatorConfig"),". You can provide your own ValidatorConfig or use the default one by leaving it empty")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var ruleCfg rules.ValidatorConfig\n")),(0,o.kt)("p",null,"or overriding default config"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'ruleCfg := rules.ValidatorConfig{\n    ValidatorRules: rules.ValidatorRules{\n        Length: rules.Length{Limits: map[string]rules.Limit{"Use": {Min: 1}}},\n        MustExist: rules.MustExist{Fields: map[string]bool{"Args": true}},\n        UseMatches: rules.UseMatches{Regexp: `^[^-_+]+$`},\n    },\n}\n')),(0,o.kt)("ol",{start:2},(0,o.kt)("li",{parentName:"ol"},"Generate the validation errors by using ",(0,o.kt)("inlineCode",{parentName:"li"},"ExecuteRules")," function over the ruleCfg")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"validationErr := rules.ExecuteRules(cmd, &ruleCfg)\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"ExecuteRules")," function will return a slice of ",(0,o.kt)("inlineCode",{parentName:"p"},"ValidationError")," object, which can be efficiently used for testing purposes."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'if len(validationErr) != 0 {\n    t.Errorf("validationErr was not empty, got length: %d; want %d", len(validationErr), 0)\n}\nfor _, errs := range validationErr {\n    if errs.Err != nil {\n        t.Errorf("%s: cmd %s: %s", errs.Rule, errs.Cmd.CommandPath(), errs.Name)\n    }\n}\n')))}p.isMDXComponent=!0}}]);